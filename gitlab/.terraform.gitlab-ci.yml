include:
    - template: "Terraform/Base.latest.gitlab-ci.yml"

# This template will deploy your system on a Kubernetes cluster via Terraform.
# It will first build the Docker images for the API and SPA, then deploy them to a cluster.
# Each branch gets deployed and is available at https://<branch-name>.example.review.brezel.cloud

# Set the SYSTEM variable to the name of your system in your normal .gitlab-ci.yml. It will overwrite it here.
variables:
    SYSTEM: example

stages:
    - build
    - deploy

build review spa:
    image: node:18
    stage: build
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    artifacts:
        expire_in: 1 week
        paths:
            - dist
    cache:
        - key:
              files:
                  - package-lock.json
          paths:
              - .npm_cache
    before_script:
        - npm config set @kibro:registry https://gitlab.kiwis-and-brownies.de/api/v4/packages/npm/
        - 'echo "//gitlab.kiwis-and-brownies.de/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc'
        - 'echo "//gitlab.kiwis-and-brownies.de/api/v4/projects/15/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc'
        - 'echo "//gitlab.kiwis-and-brownies.de/api/v4/projects/18/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc'
        - 'echo "//gitlab.kiwis-and-brownies.de/api/v4/projects/19/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc'
        - 'echo "//gitlab.kiwis-and-brownies.de/api/v4/projects/44/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc'
        - 'echo "//gitlab.kiwis-and-brownies.de/api/v4/projects/58/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> ~/.npmrc'
        - npm ci
    script:
        - export VITE_APP_API_URL="https://api.$CI_COMMIT_REF_SLUG.example.review.brezel.cloud"
        - export VITE_APP_SYSTEM=$SYSTEM
        - npm run build

build docker api:
    image: docker:git
    stage: build
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    services:
        - docker:dind
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - docker info
        - docker pull $CI_REGISTRY_IMAGE:$BRANCH_TAG || true
        - docker build -f docker/api.Dockerfile --cache-from $CI_REGISTRY_IMAGE:$BRANCH_TAG --tag $CI_REGISTRY_IMAGE:$BRANCH_TAG --target=final --build-arg SYSTEM=$SYSTEM --secret id=COMPOSER_TOKEN .
        - docker push $CI_REGISTRY_IMAGE:$BRANCH_TAG

build docker spa:
    image: docker:git
    stage: build
    needs: [ "build review spa" ]
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    services:
        - docker:dind
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - docker info
        - docker pull $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa || true
        - docker build -f spa.Dockerfile --cache-from $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa --tag $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa .
        - docker push $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa

infra:update:
    image:
        name: bitnami/kubectl
        entrypoint:
            - ""
    stage: deploy
    needs: [ "build docker api", "build docker ws","build docker spa" ]
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    before_script:
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - kubectl -n review-example-$BRANCH_TAG rollout restart deploy brezel-spa || true
        - kubectl -n review-example-$BRANCH_TAG rollout restart statefulset brezel || true

infra:review:
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    extends: .terraform:build
    stage: deploy
    needs: [ "build docker api", "build docker ws","build docker spa" ]
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    variables:
        TF_ROOT: terraform
        TF_STATE_NAME: brezel-scaleway
    before_script:
        - mkdir $HOME/.kube
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
        - export TF_STATE_NAME="scaleway-$CI_COMMIT_REF_SLUG"
        - export TF_VAR_branch=$CI_COMMIT_REF_SLUG
    resource_group: tf:product

infra:deploy:
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    extends: .terraform:deploy
    stage: deploy
    needs:
        - infra:review
    environment:
        name: $CI_COMMIT_REF_SLUG
        url: https://$CI_ENVIRONMENT_SLUG.example.review.brezel.cloud
        deployment_tier: development
        on_stop: "stop review"
    variables:
        TF_ROOT: terraform
    resource_group: tf:product
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: manual
    before_script:
        - mkdir $HOME/.kube
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
        - export TF_STATE_NAME="scaleway-$CI_COMMIT_REF_SLUG"
        - export TF_VAR_branch=$CI_COMMIT_REF_SLUG

stop review:
    image: bitnami/kubectl
    stage: deploy
    environment:
        name: $CI_COMMIT_REF_SLUG
        action: stop
    rules:
        - if: $CI_PIPELINE_SOURCE != "merge_request_event" # && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: manual
    before_script:
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - kubectl delete ns review-$SYSTEM-$BRANCH_TAG

