include:
    - template: "Terraform/Base.latest.gitlab-ci.yml"

# This template will deploy your system on a Kubernetes cluster via Terraform.
# It will first build the Docker images for the API and SPA, then deploy them to a cluster.
# Each branch gets deployed and is available at https://<branch-name>.<system-name>.review.brezel.cloud

# Set the SYSTEM variable to the name of your system in your normal .gitlab-ci.yml
#variables:
#  SYSTEM: example

stages:
    - build
    - deploy

build docker api:
    image: docker:git
    stage: build
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    rules:
        - when: always
    services:
        - docker:dind
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - docker info
        - docker pull $CI_REGISTRY_IMAGE:$BRANCH_TAG || true
        - docker build -f docker/api.Dockerfile --cache-from $CI_REGISTRY_IMAGE:$BRANCH_TAG --tag $CI_REGISTRY_IMAGE:$BRANCH_TAG --target=final --build-arg SYSTEM=$SYSTEM --build-arg PHP_MEMORY_LIMIT=1G --build-arg COMPOSER_USER=$PACKAGE_TOKEN_USER --secret id=COMPOSER_TOKEN,env=PACKAGE_TOKEN .
        - docker push $CI_REGISTRY_IMAGE:$BRANCH_TAG

build docker ws:
    image: docker:git
    stage: build
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    rules:
        - when: always
    services:
        - docker:dind
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - docker info
        - docker pull $CI_REGISTRY_IMAGE:$BRANCH_TAG || true
        - docker build -f docker/api.Dockerfile --cache-from $CI_REGISTRY_IMAGE:$BRANCH_TAG --tag $CI_REGISTRY_IMAGE:$BRANCH_TAG-brotcast --target=brotcast --build-arg SYSTEM=$SYSTEM --build-arg COMPOSER_USER=$PACKAGE_TOKEN_USER --secret id=COMPOSER_TOKEN,env=PACKAGE_TOKEN .
        - docker push $CI_REGISTRY_IMAGE:$BRANCH_TAG-brotcast

build docker spa:
    image: docker:git
    stage: build
    variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: "/certs"
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    rules:
        # For merge requests, include information about the review environment and merge request in the build
        -   if: $CI_PIPELINE_SOURCE == 'merge_request_event'
            variables:
                REVIEW_ENVIRONMENT: review/$CI_COMMIT_REF_SLUG
                MERGE_REQUEST_IID: $CI_MERGE_REQUEST_IID
                MERGE_REQUEST_TITLE: $CI_MERGE_REQUEST_TITLE
                MERGE_REQUEST_URL: $CI_MERGE_REQUEST_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_IID
        # Always execute the job
        -   when: always
    services:
        - docker:dind
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        # If TF_VAR_host is set, use it as the API URL. Else, use the review API url.
        - if [ -n "$TF_VAR_host" ]; then
            export API_URL=https://api.$TF_VAR_host
          else
            export API_URL=https://api.$CI_COMMIT_REF_SLUG.$SYSTEM.$TF_VAR_base_domain
          fi
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        - docker info
        - docker pull $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa || true
        - docker build -f docker/spa.Dockerfile --cache-from $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa --tag $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa --build-arg SYSTEM=$SYSTEM --build-arg API_URL=$API_URL --build-arg REVIEW_ENVIRONMENT=$REVIEW_ENVIRONMENT --build-arg MERGE_REQUEST_IID=$MERGE_REQUEST_IID --build-arg MERGE_REQUEST_TITLE=$MERGE_REQUEST_TITLE --build-arg MERGE_REQUEST_URL=$MERGE_REQUEST_URL --secret id=NPM_TOKEN,env=CI_JOB_TOKEN .
        - docker push $CI_REGISTRY_IMAGE:$BRANCH_TAG-spa

infra:update:
    image:
        name: bitnami/kubectl
        entrypoint:
            - ""
    stage: deploy
    needs: [ "build docker api", "build docker ws", "build docker spa" ]
    rules:
        - when: always
    before_script:
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
    script:
        - export BRANCH_TAG=$CI_COMMIT_REF_SLUG
        # If TF_VAR_namespace is set, use it as the namespace. Else, use the review namespace.
        - if [ -n "$TF_VAR_namespace" ]; then
            export NAMESPACE=$TF_VAR_namespace
          else
            export NAMESPACE=review-$SYSTEM-$BRANCH_TAG
          fi
        - kubectl -n $NAMESPACE rollout restart deploy brezel-spa || true
        - kubectl -n $NAMESPACE rollout restart statefulset brezel || true

infra:plan:
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    extends: .terraform:build
    stage: deploy
    environment:
        name: review/$CI_COMMIT_REF_SLUG
        url: https://app-$CI_ENVIRONMENT_SLUG.$TF_VAR_base_domain
        deployment_tier: development
    rules:
        - when: always
    variables:
        TF_ROOT: terraform
        TF_STATE_NAME: brezel-scaleway
        TF_VAR_registry_image: $CI_REGISTRY_IMAGE
    before_script:
        - mkdir $HOME/.kube
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
        - export TF_STATE_NAME="scaleway-$CI_COMMIT_REF_SLUG"
        - export TF_VAR_branch=$CI_COMMIT_REF_SLUG
    resource_group: tf:product
    script:
        - gitlab-terraform plan -lock=false

infra:deploy:
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    extends: .terraform:deploy
    stage: deploy
    needs:
        - infra:plan
    environment:
        name: review/$CI_COMMIT_REF_SLUG
        url: https://app-$CI_ENVIRONMENT_SLUG.$TF_VAR_base_domain
        on_stop: review:stop
        deployment_tier: development
    resource_group: tf:product
    variables:
        TF_ROOT: terraform
    rules:
        - when: manual
    before_script:
        - mkdir $HOME/.kube
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
        - export TF_STATE_NAME="scaleway-$CI_COMMIT_REF_SLUG"
        - export TF_VAR_branch=$CI_COMMIT_REF_SLUG
    script:
        # Apply the Terraform configuration
        - gitlab-terraform apply -auto-approve
        # Fetch the root password from the Terraform output
        - PASSWORD=$(gitlab-terraform output -raw root_password)
        - echo "Root password is \"$PASSWORD\""

review:stop:
    image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
    extends: .terraform:deploy
    stage: deploy
    environment:
        name: review/$CI_COMMIT_REF_SLUG
        action: stop
    resource_group: tf:product
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_SLUG != "main"
          when: manual
    variables:
        TF_ROOT: terraform
        TF_STATE_NAME: brezel-scaleway
        TF_VAR_review_environment_slug: $CI_ENVIRONMENT_SLUG
    before_script:
        - mkdir $HOME/.kube
        - cp $KUBE $HOME/.kube/config
        - export KUBECONFIG="$HOME/.kube/config"
        - export TF_STATE_NAME="scaleway-$CI_COMMIT_REF_SLUG"
        - export TF_VAR_branch=$CI_COMMIT_REF_SLUG
    script:
        - gitlab-terraform destroy -auto-approve
